/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,13],$V2=[1,14],$V3=[1,15],$V4=[1,30],$V5=[1,31],$V6=[1,32],$V7=[1,33],$V8=[1,34],$V9=[1,19],$Va=[1,42],$Vb=[1,37],$Vc=[1,38],$Vd=[1,39],$Ve=[1,40],$Vf=[1,27],$Vg=[1,28],$Vh=[1,29],$Vi=[5,16,17,18,22,23,24,25,26,28,75,77,81,82,86,90,92,93,96,97,107],$Vj=[1,62],$Vk=[1,56],$Vl=[1,57],$Vm=[1,58],$Vn=[1,59],$Vo=[1,60],$Vp=[1,66],$Vq=[1,67],$Vr=[1,68],$Vs=[1,69],$Vt=[1,70],$Vu=[8,46,47],$Vv=[2,41],$Vw=[1,76],$Vx=[1,75],$Vy=[1,77],$Vz=[1,78],$VA=[28,29,43],$VB=[1,85],$VC=[8,47],$VD=[1,95],$VE=[1,96],$VF=[1,97],$VG=[1,98],$VH=[1,99],$VI=[8,30,43,46,47,49,50,58,59,60,62,63,64,65,66,67,68,84],$VJ=[8,43],$VK=[5,16,17,18,22,23,24,25,26,28,73,75,77,81,82,86,90,92,93,96,97,107],$VL=[28,33,34,35,36,37,99,100,101,104,105],$VM=[1,145],$VN=[30,43,47],$VO=[1,199],$VP=[1,198],$VQ=[1,197],$VR=[1,196],$VS=[1,195],$VT=[43,47],$VU=[1,222],$VV=[1,223],$VW=[75,81,82],$VX=[30,47];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"Variables":7,"PUNTO_C":8,"Incremento_Decremento":9,"Vectores":10,"Sentencias_Control":11,"Sen_Ciclicas":12,"Funcs_Methods":13,"Sen_Cout":14,"Llamadas_Funcs_Methods":15,"BREAK":16,"CONTINUE":17,"RETURN":18,"Valores":19,"Sen_Execute":20,"Tipo_Dato":21,"INT":22,"DOUBLE":23,"BOOL":24,"CHAR":25,"STRING":26,"Vectores_Acceso":27,"ID":28,"C_Abre":29,"C_Cierra":30,"Dec_Variables":31,"Datos":32,"ENTERO":33,"DECIMAL":34,"BOOLEANO":35,"CAR":36,"CAD":37,"Funciones":38,"Natives_Funcs":39,"Op_Logicos":40,"Tipos_Valores":41,"P_ABRE":42,"P_CIERRA":43,"Modificador":44,"ID_Formas":45,"IGUAL":46,"COMA":47,"Crece_Decrece":48,"MAS":49,"MENOS":50,"Declaracion_1":51,"Declaracion_2":52,"Valores_Separado":53,"Valores_Corchete_Separado":54,"NEW":55,"Asignaciones_Vectores":56,"Asignaciones_Vectores_Mas":57,"POR":58,"DIVISION":59,"MODULO":60,"Op_Racionales":61,"DIFERENCIA":62,"MENOR_IGUAL":63,"MAYOR_IGUAL":64,"MENOR":65,"MAYOR":66,"AND":67,"OR":68,"Condicion":69,"Sen_IF":70,"Sen_Switch":71,"Sen_Else":72,"ELSE":73,"LLAVE_A":74,"LLAVE_C":75,"Sen_Else_If":76,"IF":77,"Bloque_Else_If":78,"If_Simple":79,"Entry_Cases":80,"CASE":81,"DEFAULT":82,"Cases":83,"DOS_PUNTOS":84,"Strcuct_Switch":85,"SWITCH":86,"Sen_While":87,"Sen_For":88,"Sen_Do_While":89,"WHILE":90,"Signos_For":91,"FOR":92,"DO":93,"Variable_Parametros":94,"Parametros":95,"VOID":96,"COUT":97,"ENDL":98,"TOLOWER":99,"TOUPPER":100,"ROUND":101,"PUNTO":102,"LENGTH":103,"TYPEOF":104,"TOSTRING":105,"C_STR":106,"EXECUTE":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTO_C",16:"BREAK",17:"CONTINUE",18:"RETURN",22:"INT",23:"DOUBLE",24:"BOOL",25:"CHAR",26:"STRING",28:"ID",29:"C_Abre",30:"C_Cierra",33:"ENTERO",34:"DECIMAL",35:"BOOLEANO",36:"CAR",37:"CAD",42:"P_ABRE",43:"P_CIERRA",46:"IGUAL",47:"COMA",49:"MAS",50:"MENOS",55:"NEW",58:"POR",59:"DIVISION",60:"MODULO",62:"DIFERENCIA",63:"MENOR_IGUAL",64:"MAYOR_IGUAL",65:"MENOR",66:"MAYOR",67:"AND",68:"OR",73:"ELSE",74:"LLAVE_A",75:"LLAVE_C",77:"IF",81:"CASE",82:"DEFAULT",84:"DOS_PUNTOS",86:"SWITCH",90:"WHILE",92:"FOR",93:"DO",96:"VOID",97:"COUT",98:"ENDL",99:"TOLOWER",100:"TOUPPER",101:"ROUND",102:"PUNTO",103:"LENGTH",104:"TYPEOF",105:"TOSTRING",106:"C_STR",107:"EXECUTE"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,3],[6,2],[6,2],[21,1],[21,1],[21,1],[21,1],[21,1],[27,4],[27,7],[7,2],[7,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[19,1],[19,3],[41,1],[41,4],[44,1],[44,1],[45,1],[45,3],[31,1],[31,3],[48,2],[48,2],[9,2],[10,1],[10,1],[53,1],[53,3],[54,3],[54,5],[51,10],[51,15],[56,3],[56,1],[57,3],[57,1],[52,6],[52,8],[40,1],[40,1],[40,1],[40,1],[40,1],[61,2],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[69,1],[69,3],[11,1],[11,1],[72,4],[76,8],[78,1],[78,2],[79,7],[70,1],[70,2],[70,2],[70,3],[80,2],[80,1],[83,3],[85,1],[85,2],[71,7],[12,1],[12,1],[12,1],[87,7],[91,1],[91,1],[91,1],[91,1],[91,1],[88,16],[89,8],[94,1],[94,3],[94,5],[95,2],[95,4],[13,8],[13,7],[13,8],[13,7],[15,4],[15,3],[14,4],[14,7],[38,4],[38,4],[38,4],[39,5],[39,4],[39,4],[39,5],[20,4],[20,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=$$[$0-1]; return this.$;
break;
case 2:
this.$ = $$[$0-1];
break;
case 4:
console.error('Error sint√°ctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},{1:[3]},{5:[1,44],6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),{8:[1,46]},{8:[1,47]},{8:[1,48]},o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),{8:[1,49]},{8:[1,50]},{8:[1,51]},{8:[1,52]},{8:[1,54],15:63,19:53,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{8:[1,71]},{27:43,28:[1,73],31:72,44:41,45:35},{8:[2,26]},o($Vu,$Vv,{48:74,29:$Vw,42:$Vx,49:$Vy,50:$Vz}),{8:[2,50]},{8:[2,51]},o($Vi,[2,79]),o($Vi,[2,80]),o($Vi,[2,96]),o($Vi,[2,97]),o($Vi,[2,98]),{28:[1,79]},{65:[1,80]},{28:[1,81]},o($VA,[2,18]),o($VA,[2,19]),o($VA,[2,20]),o($VA,[2,21]),o($VA,[2,22]),{8:[2,45],47:[1,82]},o($Vi,[2,86],{72:83,78:84,76:86,73:$VB}),{42:[1,87]},{42:[1,88]},{42:[1,89]},{74:[1,90]},o($VC,[2,43],{46:[1,91]}),{42:[1,92]},o($Vu,[2,42]),{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),{8:[1,93],40:94,49:$VD,50:$VE,58:$VF,59:$VG,60:$VH},o($Vi,[2,16]),o($VI,[2,37]),o($VI,[2,27]),o($VI,[2,28]),o($VI,[2,29]),o($VI,[2,30]),o($VI,[2,31]),o($VI,[2,32]),o($VI,[2,33],{29:$Vw,42:$Vx,102:[1,100]}),o($VI,[2,34]),o($VI,[2,35]),o($VI,[2,36]),{42:[1,101]},{42:[1,102]},{42:[1,103]},{42:[1,104]},{42:[1,105]},o($Vi,[2,17]),{8:[2,25]},o($Vu,$Vv,{29:[1,107],42:[1,106]}),o($VJ,[2,49]),{15:63,19:110,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,43:[1,109],53:108,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{15:63,19:111,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{49:[1,112]},{50:[1,113]},{42:[1,114]},{65:[1,115]},{42:[1,116]},{27:43,28:[1,118],31:117,44:41,45:35},o($Vi,[2,87]),o($Vi,[2,88],{72:119,76:120,73:$VB}),{74:[1,121],77:[1,122]},o($VK,[2,83]),{15:63,19:123,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{15:63,19:125,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,69:124,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{21:126,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8},{2:$V0,4:127,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},{15:63,19:129,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,41:128,42:[1,130],99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{15:63,19:125,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,69:131,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},o($Vi,[2,15]),{15:63,27:61,28:$Vj,32:132,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},o($VL,[2,64]),o($VL,[2,65]),o($VL,[2,66]),o($VL,[2,67]),o($VL,[2,68]),{103:[1,133],106:[1,134]},{15:63,19:135,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{15:63,19:136,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{15:63,19:137,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{15:63,19:138,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{15:63,19:139,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{21:142,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,43:[1,141],95:140},{15:63,19:111,27:61,28:$Vj,30:[1,143],32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{43:[1,144],47:$VM},o($VI,[2,117]),o($VN,[2,52],{40:94,49:$VD,50:$VE,58:$VF,59:$VG,60:$VH}),{30:[1,146],40:94,49:$VD,50:$VE,58:$VF,59:$VG,60:$VH},o($VJ,[2,47]),o($VJ,[2,48]),{21:142,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,43:[1,148],95:147},{15:63,19:149,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{21:142,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,43:[1,150],95:151},{8:[2,46]},o($Vu,$Vv,{29:$Vw}),o($Vi,[2,89]),o($VK,[2,84]),{2:$V0,4:152,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},{42:[1,153]},{40:94,43:[1,154],49:$VD,50:$VE,58:$VF,59:$VG,60:$VH},{43:[1,155]},{40:94,43:[2,77],46:[1,157],49:$VD,50:$VE,58:$VF,59:$VG,60:$VH,61:156,62:[1,158],63:[1,159],64:[1,160],65:[1,161],66:[1,162],67:[1,163],68:[1,164]},{28:[1,165]},{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,75:[1,166],77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},o($VC,[2,44]),o($VC,[2,39],{40:94,49:$VD,50:$VE,58:$VF,59:$VG,60:$VH}),{21:167,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8},{43:[1,168]},o($VI,[2,38]),{42:[1,169]},{42:[1,170]},{40:94,43:[1,171],49:$VD,50:$VE,58:$VF,59:$VG,60:$VH},{40:94,43:[1,172],49:$VD,50:$VE,58:$VF,59:$VG,60:$VH},{40:94,43:[1,173],49:$VD,50:$VE,58:$VF,59:$VG,60:$VH},{40:94,43:[1,174],49:$VD,50:$VE,58:$VF,59:$VG,60:$VH},{40:94,43:[1,175],49:$VD,50:$VE,58:$VF,59:$VG,60:$VH},{43:[1,176]},{74:[1,177]},{28:[1,179],94:178},{29:[1,181],46:[1,180]},o($VI,[2,116]),{15:63,19:182,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},o($VI,[2,23],{29:[1,183]}),{43:[1,184]},{74:[1,185]},{8:[2,118],40:94,49:$VD,50:$VE,58:$VF,59:$VG,60:$VH,65:[1,186]},{8:[2,127]},{43:[1,187]},{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,75:[1,188],77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},{15:63,19:125,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,69:189,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{74:[1,190]},{74:[1,191]},{15:63,19:125,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,69:192,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{46:[1,193]},o($VL,[2,70]),o($VL,[2,71]),o($VL,[2,72]),o($VL,[2,73]),o($VL,[2,74]),o($VL,[2,75]),o($VL,[2,76]),{46:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,91:194},{90:[1,200]},{43:[1,201]},{74:[1,202]},{43:[1,203]},{43:[1,204]},o($VI,[2,120]),o($VI,[2,121]),o($VI,[2,122]),o($VI,[2,124]),o($VI,[2,125]),{74:[1,205]},{2:$V0,4:206,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},{43:[2,110],47:[1,207]},o($VT,[2,107],{42:[1,208]}),{15:63,19:212,27:61,28:$Vj,29:[1,211],32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,55:[1,209],56:210,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{30:[1,213]},o($VN,[2,53],{40:94,49:$VD,50:$VE,58:$VF,59:$VG,60:$VH}),{15:63,19:214,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{74:[1,215]},{2:$V0,4:216,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},{65:[1,217]},{8:[2,128]},o($Vi,[2,81]),{43:[1,218]},{80:221,81:$VU,82:$VV,83:220,85:219},{2:$V0,4:224,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},{43:[2,78]},o($VL,[2,69]),{15:63,19:225,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},o($VL,[2,100]),o($VL,[2,101]),o($VL,[2,102]),o($VL,[2,103]),o($VL,[2,104]),{42:[1,226]},{15:63,19:227,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{2:$V0,4:228,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},o($VI,[2,123]),o($VI,[2,126]),{2:$V0,4:229,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,75:[1,230],77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},{21:142,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,95:231},{43:[1,232]},{21:233,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8},{8:[2,62]},{15:63,19:110,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,53:234,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{8:[2,59],40:94,49:$VD,50:$VE,58:$VF,59:$VG,60:$VH},{46:[1,235]},{30:[1,236],40:94,49:$VD,50:$VE,58:$VF,59:$VG,60:$VH},{2:$V0,4:237,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,75:[1,238],77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},{98:[1,239]},{74:[1,240]},{75:[1,241],80:221,81:$VU,82:$VV,83:242},o($VW,[2,93]),{84:[1,243]},{15:63,19:244,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{84:[2,91]},{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,75:[1,245],77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},{8:[1,246],40:94,49:$VD,50:$VE,58:$VF,59:$VG,60:$VH},{15:63,19:125,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,69:247,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},o($VC,[2,40],{40:94,49:$VD,50:$VE,58:$VF,59:$VG,60:$VH}),{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,75:[1,248],77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,75:[1,249],77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},o($Vi,[2,113]),{43:[2,111]},o($VT,[2,108],{42:[1,250]}),{29:[1,251]},{30:[1,252],47:$VM},{15:63,19:256,27:61,28:$Vj,29:[1,255],32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,55:[1,253],57:254,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},o($VI,[2,24]),{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,75:[1,257],77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},o($Vi,[2,115]),{8:[2,119]},{2:$V0,4:258,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},o($Vi,[2,95]),o($VW,[2,94]),{2:$V0,4:259,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},{40:94,49:$VD,50:$VE,58:$VF,59:$VG,60:$VH,84:[2,90]},o($Vi,[2,99]),{28:[1,260]},{43:[1,261]},o($VK,[2,85]),o($Vi,[2,112]),{43:[1,262]},{15:63,19:263,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{8:[2,58]},{21:264,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8},{8:[2,63]},{29:[1,266],54:265},{8:[2,61],40:94,49:$VD,50:$VE,58:$VF,59:$VG,60:$VH},o($Vi,[2,114]),{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,75:[1,267],77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},o($VW,[2,92],{7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,20:16,21:17,31:18,51:20,52:21,70:22,71:23,87:24,88:25,89:26,45:35,79:36,44:41,27:43,6:45,16:$V1,17:$V2,18:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:$V9,77:$Va,86:$Vb,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh}),{46:$VO,63:$VP,64:$VQ,65:$VR,66:$VS,91:268},o($Vi,[2,106]),o($VT,[2,109]),{30:[1,269],40:94,49:$VD,50:$VE,58:$VF,59:$VG,60:$VH},{29:[1,270]},{30:[1,271],47:[1,272]},{15:63,19:110,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,53:273,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},o($VK,[2,82]),{15:63,19:274,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{8:[2,56]},{15:63,19:275,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},{8:[2,60]},{29:[1,276]},{30:[1,277],47:$VM},{8:[1,278],40:94,49:$VD,50:$VE,58:$VF,59:$VG,60:$VH},{30:[1,279],40:94,49:$VD,50:$VE,58:$VF,59:$VG,60:$VH},{15:63,19:110,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,53:280,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},o($VX,[2,54]),{9:281,28:[1,282]},{29:[1,283]},{30:[1,284],47:$VM},{43:[1,285]},{48:74,49:$Vy,50:$Vz},{15:63,19:286,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,99:$Vp,100:$Vq,101:$Vr,104:$Vs,105:$Vt},o($VX,[2,55]),{74:[1,287]},{30:[1,288],40:94,49:$VD,50:$VE,58:$VF,59:$VG,60:$VH},{2:$V0,4:289,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},{8:[2,57]},{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,44:41,45:35,51:20,52:21,70:22,71:23,75:[1,290],77:$Va,79:36,86:$Vb,87:24,88:25,89:26,90:$Vc,92:$Vd,93:$Ve,96:$Vf,97:$Vg,107:$Vh},o($Vi,[2,105])],
defaultActions: {18:[2,26],20:[2,50],21:[2,51],44:[2,1],72:[2,25],117:[2,46],150:[2,127],187:[2,128],192:[2,78],210:[2,62],223:[2,91],231:[2,111],239:[2,119],252:[2,58],254:[2,63],269:[2,56],271:[2,60],288:[2,57]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Espacios se ignoran */
break;
case 1:/* Comentario de una linea */
break;
case 2:/* Comentario multilinea */
break;
case 3: return 22; 
break;
case 4: return 23; 
break;
case 5: return 24; 
break;
case 6: return 25; 
break;
case 7: return 26; 
break;
case 8: return 73; 
break;
case 9: return 55; 
break;
case 10: return 77; 
break;
case 11: return 86; 
break;
case 12: return 81; 
break;
case 13: return 16; 
break;
case 14: return 82; 
break;
case 15: return 17; 
break;
case 16: return 18; 
break;
case 17: return 96; 
break;
case 18: return 97; 
break;
case 19: return 98; 
break;
case 20: return 99; 
break;
case 21: return 100; 
break;
case 22: return 101; 
break;
case 23: return 103; 
break;
case 24: return 104; 
break;
case 25: return 105; 
break;
case 26: return 106; 
break;
case 27: return 107; 
break;
case 28: return 93; 
break;
case 29: return 90; 
break;
case 30: return 92; 
break;
case 31: return 34; 
break;
case 32: return 33; 
break;
case 33: return 35; 
break;
case 34: return 36; 
break;
case 35: return 37; 
break;
case 36: return 28; 
break;
case 37:return 102; 
break;
case 38:return 84; 
break;
case 39:return 8; 
break;
case 40:return 47; 
break;
case 41:return 46; 
break;
case 42:return 62; 
break;
case 43:return 63; 
break;
case 44:return 64; 
break;
case 45:return 65; 
break;
case 46:return 66; 
break;
case 47:return 67; 
break;
case 48:return 68; 
break;
case 49:return 49; 
break;
case 50:return 50; 
break;
case 51:return 58; 
break;
case 52:return 59; 
break;
case 53:return 42; 
break;
case 54:return 43; 
break;
case 55:return 29; 
break;
case 56:return 30; 
break;
case 57: return 74; 
break;
case 58: return 75; 
break;
case 59: return 60; 
break;
case 60:return 5;
break;
case 61: console.error('Error l√©xico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);  
break;
}
},
rules: [/^(?:[ \s\r\n\t])/i,/^(?:\/\/.*)/i,/^(?:\/\*[^]*?\*\/)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:Char\b)/i,/^(?:std::string\b)/i,/^(?:else\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:Tolower\b)/i,/^(?:Toupper\b)/i,/^(?:Round\b)/i,/^(?:Length\b)/i,/^(?:Typeof\b)/i,/^(?:std::ToString\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:(([0-9]+|-[0-9]+)\.[0-9]+))/i,/^(?:([0-9]+|-[0-9]+))/i,/^(?:(true|false\b))/i,/^(?:('[^"'"]'|''))/i,/^(?:("[^"\""]*"))/i,/^(?:([a-zA-Z][a-zA-Z0-9\_]*))/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:%)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}