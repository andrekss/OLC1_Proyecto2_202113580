/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,13],$V2=[1,14],$V3=[1,15],$V4=[1,30],$V5=[1,31],$V6=[1,32],$V7=[1,33],$V8=[1,34],$V9=[1,19],$Va=[1,42],$Vb=[1,37],$Vc=[1,38],$Vd=[1,39],$Ve=[1,40],$Vf=[1,27],$Vg=[1,28],$Vh=[1,29],$Vi=[5,16,17,18,22,23,24,25,26,28,77,79,83,84,88,92,94,95,98,99,109],$Vj=[1,62],$Vk=[1,56],$Vl=[1,57],$Vm=[1,58],$Vn=[1,59],$Vo=[1,60],$Vp=[1,66],$Vq=[1,67],$Vr=[1,68],$Vs=[1,69],$Vt=[1,70],$Vu=[1,71],$Vv=[8,42,48],$Vw=[2,42],$Vx=[1,77],$Vy=[1,76],$Vz=[1,78],$VA=[1,79],$VB=[28,29,43],$VC=[1,86],$VD=[8,42],$VE=[1,96],$VF=[1,97],$VG=[1,98],$VH=[1,99],$VI=[1,100],$VJ=[8,30,42,43,48,50,51,59,60,61,63,64,65,66,67,68,69,70,86],$VK=[8,43],$VL=[5,16,17,18,22,23,24,25,26,28,75,77,79,83,84,88,92,94,95,98,99,109],$VM=[28,33,34,35,36,37,40,101,102,103,106,107],$VN=[1,148],$VO=[30,42,43],$VP=[1,204],$VQ=[1,203],$VR=[1,202],$VS=[1,201],$VT=[1,200],$VU=[42,43],$VV=[1,228],$VW=[1,229],$VX=[77,83,84],$VY=[30,42];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"Variables":7,"PUNTO_C":8,"Incremento_Decremento":9,"Vectores":10,"Sentencias_Control":11,"Sen_Ciclicas":12,"Funcs_Methods":13,"Sen_Cout":14,"Llamadas_Funcs_Methods":15,"BREAK":16,"CONTINUE":17,"RETURN":18,"Valores":19,"Sen_Execute":20,"Tipo_Dato":21,"INT":22,"DOUBLE":23,"BOOL":24,"CHAR":25,"STRING":26,"Vectores_Acceso":27,"ID":28,"C_Abre":29,"C_Cierra":30,"Dec_Variables":31,"Datos":32,"ENTERO":33,"DECIMAL":34,"BOOLEANO":35,"CAR":36,"CAD":37,"Funciones":38,"Natives_Funcs":39,"POW":40,"P_ABRE":41,"COMA":42,"P_CIERRA":43,"Op_Logicos":44,"Tipos_Valores":45,"Modificador":46,"ID_Formas":47,"IGUAL":48,"Crece_Decrece":49,"MAS":50,"MENOS":51,"Declaracion_1":52,"Declaracion_2":53,"Valores_Separado":54,"Valores_Corchete_Separado":55,"NEW":56,"Asignaciones_Vectores":57,"Asignaciones_Vectores_Mas":58,"POR":59,"DIVISION":60,"MODULO":61,"Op_Racionales":62,"DIFERENCIA":63,"MENOR_IGUAL":64,"MAYOR_IGUAL":65,"MENOR":66,"MAYOR":67,"AND":68,"OR":69,"NOT":70,"Condicion":71,"Sen_IF":72,"Sen_Switch":73,"Sen_Else":74,"ELSE":75,"LLAVE_A":76,"LLAVE_C":77,"Sen_Else_If":78,"IF":79,"Bloque_Else_If":80,"If_Simple":81,"Entry_Cases":82,"CASE":83,"DEFAULT":84,"Cases":85,"DOS_PUNTOS":86,"Strcuct_Switch":87,"SWITCH":88,"Sen_While":89,"Sen_For":90,"Sen_Do_While":91,"WHILE":92,"Signos_For":93,"FOR":94,"DO":95,"Variable_Parametros":96,"Parametros":97,"VOID":98,"COUT":99,"ENDL":100,"TOLOWER":101,"TOUPPER":102,"ROUND":103,"PUNTO":104,"LENGTH":105,"TYPEOF":106,"TOSTRING":107,"C_STR":108,"EXECUTE":109,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTO_C",16:"BREAK",17:"CONTINUE",18:"RETURN",22:"INT",23:"DOUBLE",24:"BOOL",25:"CHAR",26:"STRING",28:"ID",29:"C_Abre",30:"C_Cierra",33:"ENTERO",34:"DECIMAL",35:"BOOLEANO",36:"CAR",37:"CAD",40:"POW",41:"P_ABRE",42:"COMA",43:"P_CIERRA",48:"IGUAL",50:"MAS",51:"MENOS",56:"NEW",59:"POR",60:"DIVISION",61:"MODULO",63:"DIFERENCIA",64:"MENOR_IGUAL",65:"MAYOR_IGUAL",66:"MENOR",67:"MAYOR",68:"AND",69:"OR",70:"NOT",75:"ELSE",76:"LLAVE_A",77:"LLAVE_C",79:"IF",83:"CASE",84:"DEFAULT",86:"DOS_PUNTOS",88:"SWITCH",92:"WHILE",94:"FOR",95:"DO",98:"VOID",99:"COUT",100:"ENDL",101:"TOLOWER",102:"TOUPPER",103:"ROUND",104:"PUNTO",105:"LENGTH",106:"TYPEOF",107:"TOSTRING",108:"C_STR",109:"EXECUTE"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,3],[6,2],[6,2],[21,1],[21,1],[21,1],[21,1],[21,1],[27,4],[27,7],[7,2],[7,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,6],[19,1],[19,3],[45,1],[45,4],[46,1],[46,1],[47,1],[47,3],[31,1],[31,3],[49,2],[49,2],[9,2],[10,1],[10,1],[54,1],[54,3],[55,3],[55,5],[52,10],[52,15],[57,3],[57,1],[58,3],[58,1],[53,6],[53,8],[44,1],[44,1],[44,1],[44,1],[44,1],[62,2],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[71,1],[71,3],[11,1],[11,1],[74,4],[78,8],[80,1],[80,2],[81,7],[72,1],[72,2],[72,2],[72,3],[82,2],[82,1],[85,3],[87,1],[87,2],[73,7],[12,1],[12,1],[12,1],[89,7],[93,1],[93,1],[93,1],[93,1],[93,1],[90,16],[91,8],[96,1],[96,3],[96,5],[97,2],[97,4],[13,8],[13,7],[13,8],[13,7],[15,4],[15,3],[14,4],[14,7],[38,4],[38,4],[38,4],[39,5],[39,4],[39,4],[39,5],[20,4],[20,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=$$[$0-1]; return this.$;
break;
case 2:
this.$ = $$[$0-1];
break;
case 4:
console.error('Error sintáctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column);
break;
case 27:
  this.$= GetDato($$[$0], "INT"); 
break;
case 28:
 this.$= GetDato($$[$0], "DOUBLE"); 
break;
case 29:
 this.$= GetDato($$[$0], "BOOL"); 
break;
case 30:
 this.$= GetDato($$[$0], "CHAR"); 
break;
case 31:
 this.$= GetDato($$[$0], "STRING"); 
break;
case 37:

		let Entorno = {
        Dato1: $$[$0-3], // Atributo nombre con valor 'Juan'
        Dato2: $$[$0-1],       // Atributo edad con valor 30
       };


		let Operación =  new Aritmetica(Entorno.Dato1.valor,"Pot",Entorno.Dato2.valor);
		
		this.$ = Operación.interpretar(Entorno);
	
break;
case 38:
 if(typeof $$[$0] === 'object'){ DatosDef.push($$[$0].valor); }else{ DatosDef.push($$[$0]); } 
break;
case 39:
 Signos.push($$[$0-1]); if(typeof $$[$0] === 'object'){ DatosDef.push($$[$0].valor); }else{ DatosDef.push($$[$0]); } 
break;
case 120:
 Imprimir();
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},{1:[3]},{5:[1,44],6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),{8:[1,46]},{8:[1,47]},{8:[1,48]},o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),{8:[1,49]},{8:[1,50]},{8:[1,51]},{8:[1,52]},{8:[1,54],15:63,19:53,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{8:[1,72]},{27:43,28:[1,74],31:73,46:41,47:35},{8:[2,26]},o($Vv,$Vw,{49:75,29:$Vx,41:$Vy,50:$Vz,51:$VA}),{8:[2,51]},{8:[2,52]},o($Vi,[2,81]),o($Vi,[2,82]),o($Vi,[2,98]),o($Vi,[2,99]),o($Vi,[2,100]),{28:[1,80]},{66:[1,81]},{28:[1,82]},o($VB,[2,18]),o($VB,[2,19]),o($VB,[2,20]),o($VB,[2,21]),o($VB,[2,22]),{8:[2,46],42:[1,83]},o($Vi,[2,88],{74:84,80:85,78:87,75:$VC}),{41:[1,88]},{41:[1,89]},{41:[1,90]},{76:[1,91]},o($VD,[2,44],{48:[1,92]}),{41:[1,93]},o($Vv,[2,43]),{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),{8:[1,94],44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI},o($Vi,[2,16]),o($VJ,[2,38]),o($VJ,[2,27]),o($VJ,[2,28]),o($VJ,[2,29]),o($VJ,[2,30]),o($VJ,[2,31]),o($VJ,[2,32]),o($VJ,[2,33],{29:$Vx,41:$Vy,104:[1,101]}),o($VJ,[2,34]),o($VJ,[2,35]),o($VJ,[2,36]),{41:[1,102]},{41:[1,103]},{41:[1,104]},{41:[1,105]},{41:[1,106]},{41:[1,107]},o($Vi,[2,17]),{8:[2,25]},o($Vv,$Vw,{29:[1,109],41:[1,108]}),o($VK,[2,50]),{15:63,19:112,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,43:[1,111],54:110,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{15:63,19:113,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{50:[1,114]},{51:[1,115]},{41:[1,116]},{66:[1,117]},{41:[1,118]},{27:43,28:[1,120],31:119,46:41,47:35},o($Vi,[2,89]),o($Vi,[2,90],{74:121,78:122,75:$VC}),{76:[1,123],79:[1,124]},o($VL,[2,85]),{15:63,19:125,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{15:63,19:127,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,71:126,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{21:128,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8},{2:$V0,4:129,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},{15:63,19:131,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,41:[1,132],45:130,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{15:63,19:127,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,71:133,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},o($Vi,[2,15]),{15:63,27:61,28:$Vj,32:134,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},o($VM,[2,65]),o($VM,[2,66]),o($VM,[2,67]),o($VM,[2,68]),o($VM,[2,69]),{105:[1,135],108:[1,136]},{15:63,27:61,28:$Vj,32:137,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{15:63,19:138,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{15:63,19:139,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{15:63,19:140,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{15:63,19:141,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{15:63,19:142,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{21:145,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,43:[1,144],97:143},{15:63,19:113,27:61,28:$Vj,30:[1,146],32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{42:$VN,43:[1,147]},o($VJ,[2,119]),o($VO,[2,53],{44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI}),{30:[1,149],44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI},o($VK,[2,48]),o($VK,[2,49]),{21:145,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,43:[1,151],97:150},{15:63,19:152,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{21:145,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,43:[1,153],97:154},{8:[2,47]},o($Vv,$Vw,{29:$Vx}),o($Vi,[2,91]),o($VL,[2,86]),{2:$V0,4:155,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},{41:[1,156]},{43:[1,157],44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI},{43:[1,158]},{43:[2,79],44:95,48:[1,160],50:$VE,51:$VF,59:$VG,60:$VH,61:$VI,62:159,63:[1,161],64:[1,162],65:[1,163],66:[1,164],67:[1,165],68:[1,166],69:[1,167],70:[1,168]},{28:[1,169]},{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,77:[1,170],79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},o($VD,[2,45]),o($VD,[2,40],{44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI}),{21:171,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8},{43:[1,172]},o($VJ,[2,39]),{41:[1,173]},{41:[1,174]},{42:[1,175]},{43:[1,176],44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI},{43:[1,177],44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI},{43:[1,178],44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI},{43:[1,179],44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI},{43:[1,180],44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI},{43:[1,181]},{76:[1,182]},{28:[1,184],96:183},{29:[1,186],48:[1,185]},o($VJ,[2,118]),{15:63,19:187,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},o($VJ,[2,23],{29:[1,188]}),{43:[1,189]},{76:[1,190]},{8:[2,120],44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI,66:[1,191]},{8:[2,129]},{43:[1,192]},{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,77:[1,193],79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},{15:63,19:127,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,71:194,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{76:[1,195]},{76:[1,196]},{15:63,19:127,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,71:197,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{48:[1,198]},o($VM,[2,71]),o($VM,[2,72]),o($VM,[2,73]),o($VM,[2,74]),o($VM,[2,75]),o($VM,[2,76]),o($VM,[2,77]),o($VM,[2,78]),{48:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,93:199},{92:[1,205]},{43:[1,206]},{76:[1,207]},{43:[1,208]},{43:[1,209]},{15:63,27:61,28:$Vj,32:210,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},o($VJ,[2,122]),o($VJ,[2,123]),o($VJ,[2,124]),o($VJ,[2,126]),o($VJ,[2,127]),{76:[1,211]},{2:$V0,4:212,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},{42:[1,213],43:[2,112]},o($VU,[2,109],{41:[1,214]}),{15:63,19:218,27:61,28:$Vj,29:[1,217],32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,56:[1,215],57:216,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{30:[1,219]},o($VO,[2,54],{44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI}),{15:63,19:220,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{76:[1,221]},{2:$V0,4:222,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},{66:[1,223]},{8:[2,130]},o($Vi,[2,83]),{43:[1,224]},{82:227,83:$VV,84:$VW,85:226,87:225},{2:$V0,4:230,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},{43:[2,80]},o($VM,[2,70]),{15:63,19:231,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},o($VM,[2,102]),o($VM,[2,103]),o($VM,[2,104]),o($VM,[2,105]),o($VM,[2,106]),{41:[1,232]},{15:63,19:233,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{2:$V0,4:234,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},o($VJ,[2,125]),o($VJ,[2,128]),{43:[1,235]},{2:$V0,4:236,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,77:[1,237],79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},{21:145,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,97:238},{43:[1,239]},{21:240,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8},{8:[2,63]},{15:63,19:112,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,54:241,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{8:[2,60],44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI},{48:[1,242]},{30:[1,243],44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI},{2:$V0,4:244,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,77:[1,245],79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},{100:[1,246]},{76:[1,247]},{77:[1,248],82:227,83:$VV,84:$VW,85:249},o($VX,[2,95]),{86:[1,250]},{15:63,19:251,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{86:[2,93]},{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,77:[1,252],79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},{8:[1,253],44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI},{15:63,19:127,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,71:254,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},o($VD,[2,41],{44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI}),{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,77:[1,255],79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},o($VJ,[2,37]),{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,77:[1,256],79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},o($Vi,[2,115]),{43:[2,113]},o($VU,[2,110],{41:[1,257]}),{29:[1,258]},{30:[1,259],42:$VN},{15:63,19:263,27:61,28:$Vj,29:[1,262],32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,56:[1,260],58:261,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},o($VJ,[2,24]),{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,77:[1,264],79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},o($Vi,[2,117]),{8:[2,121]},{2:$V0,4:265,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},o($Vi,[2,97]),o($VX,[2,96]),{2:$V0,4:266,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},{44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI,86:[2,92]},o($Vi,[2,101]),{28:[1,267]},{43:[1,268]},o($VL,[2,87]),o($Vi,[2,114]),{43:[1,269]},{15:63,19:270,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{8:[2,59]},{21:271,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8},{8:[2,64]},{29:[1,273],55:272},{8:[2,62],44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI},o($Vi,[2,116]),{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,77:[1,274],79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},o($VX,[2,94],{7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,20:16,21:17,31:18,52:20,53:21,72:22,73:23,89:24,90:25,91:26,47:35,81:36,46:41,27:43,6:45,16:$V1,17:$V2,18:$V3,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,28:$V9,79:$Va,88:$Vb,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh}),{48:$VP,64:$VQ,65:$VR,66:$VS,67:$VT,93:275},o($Vi,[2,108]),o($VU,[2,111]),{30:[1,276],44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI},{29:[1,277]},{30:[1,278],42:[1,279]},{15:63,19:112,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,54:280,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},o($VL,[2,84]),{15:63,19:281,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{8:[2,57]},{15:63,19:282,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},{8:[2,61]},{29:[1,283]},{30:[1,284],42:$VN},{8:[1,285],44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI},{30:[1,286],44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI},{15:63,19:112,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,54:287,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},o($VY,[2,55]),{9:288,28:[1,289]},{29:[1,290]},{30:[1,291],42:$VN},{43:[1,292]},{49:75,50:$Vz,51:$VA},{15:63,19:293,27:61,28:$Vj,32:55,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:64,39:65,40:$Vp,101:$Vq,102:$Vr,103:$Vs,106:$Vt,107:$Vu},o($VY,[2,56]),{76:[1,294]},{30:[1,295],44:95,50:$VE,51:$VF,59:$VG,60:$VH,61:$VI},{2:$V0,4:296,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},{8:[2,58]},{6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,18:$V3,20:16,21:17,22:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:43,28:$V9,31:18,46:41,47:35,52:20,53:21,72:22,73:23,77:[1,297],79:$Va,81:36,88:$Vb,89:24,90:25,91:26,92:$Vc,94:$Vd,95:$Ve,98:$Vf,99:$Vg,109:$Vh},o($Vi,[2,107])],
defaultActions: {18:[2,26],20:[2,51],21:[2,52],44:[2,1],73:[2,25],119:[2,47],153:[2,129],192:[2,130],197:[2,80],216:[2,63],229:[2,93],238:[2,113],246:[2,121],259:[2,59],261:[2,64],276:[2,57],278:[2,61],295:[2,58]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


   const Dato = require("../src/Interpreter/Expresion/Dato.js");
   const Aritmetica = require("../src/Interpreter/Expresion/Aritmetica.js")
   let { DatosDef,Signos } = require("../src/Interpreter/Expresion/Operaciones.js");
    
   function GetDato(Valor, Tipo){
 	let dato = new Dato(Valor,Tipo); 
	return dato.interpretar();
   }

   function Imprimir(){
    console.log("-------------------------");
	console.log("Datos");
	for (let i = 0; i < DatosDef.length; i++) {
     console.log(DatosDef[i]);
    }

    console.log("Signos")
	for (let i = 0; i < Signos.length; i++) {
     console.log(Signos[i]);
    }
	console.log("-------------------------");
	DatosDef = [];
	Signos = [];	
   }
   

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Espacios se ignoran */
break;
case 1:/* Comentario de una linea */
break;
case 2:/* Comentario multilinea */
break;
case 3: return 22; 
break;
case 4: return 23; 
break;
case 5: return 24; 
break;
case 6: return 25; 
break;
case 7: return 26; 
break;
case 8: return 75; 
break;
case 9: return 56; 
break;
case 10: return 79; 
break;
case 11: return 88; 
break;
case 12: return 83; 
break;
case 13: return 16; 
break;
case 14: return 84; 
break;
case 15: return 17; 
break;
case 16: return 18; 
break;
case 17: return 98; 
break;
case 18: return 99; 
break;
case 19: return 100; 
break;
case 20: return 40; 
break;
case 21: return 101; 
break;
case 22: return 102; 
break;
case 23: return 103; 
break;
case 24: return 105; 
break;
case 25: return 106; 
break;
case 26: return 107; 
break;
case 27: return 108; 
break;
case 28: return 109; 
break;
case 29: return 95; 
break;
case 30: return 92; 
break;
case 31: return 94; 
break;
case 32: return 34; 
break;
case 33: return 33; 
break;
case 34: return 35; 
break;
case 35: return 36; 
break;
case 36: return 37; 
break;
case 37: return 28; 
break;
case 38:return 104; 
break;
case 39:return 86; 
break;
case 40:return 8; 
break;
case 41:return 42; 
break;
case 42:return 48; 
break;
case 43:return 63; 
break;
case 44:return 64; 
break;
case 45:return 65; 
break;
case 46:return 66; 
break;
case 47:return 67; 
break;
case 48:return 68; 
break;
case 49:return 69; 
break;
case 50:return 70; 
break;
case 51:return 50; 
break;
case 52:return 51; 
break;
case 53:return 59; 
break;
case 54:return 60; 
break;
case 55:return 41; 
break;
case 56:return 43; 
break;
case 57:return 29; 
break;
case 58:return 30; 
break;
case 59: return 76; 
break;
case 60: return 77; 
break;
case 61: return 61; 
break;
case 62:return 5;
break;
case 63: console.error('Error léxico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);  
break;
}
},
rules: [/^(?:[ \s\r\n\t])/i,/^(?:\/\/.*)/i,/^(?:\/\*[^]*?\*\/)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:Char\b)/i,/^(?:std::string\b)/i,/^(?:else\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:pow\b)/i,/^(?:Tolower\b)/i,/^(?:Toupper\b)/i,/^(?:Round\b)/i,/^(?:Length\b)/i,/^(?:Typeof\b)/i,/^(?:std::ToString\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:(([0-9]+|-[0-9]+)\.[0-9]+))/i,/^(?:([0-9]+|-[0-9]+))/i,/^(?:(true|false\b))/i,/^(?:('[^"'"]'|''))/i,/^(?:("[^"\""]*"))/i,/^(?:([a-zA-Z][a-zA-Z0-9\_]*))/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:%)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}